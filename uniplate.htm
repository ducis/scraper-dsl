<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
        <title>Boilerplate Removal with Uniplate</title>
        <style type="text/css">
pre {
    border: 2px solid gray;
    padding: 1px;
    padding-left: 5px;
    margin-left: 10px;
    background-color: #eee;
}

pre.define {
    background-color: #ffb;
    border-color: #cc0;
}

body {
    font-family: sans-serif;
}

h1, h2, h3 {
    font-family: serif;
}

h1 {
    color: rgb(23,54,93);
    border-bottom: 1px solid rgb(79,129,189);
    padding-bottom: 2px;
    font-variant: small-caps;
    text-align: center;
}

a {
    color: rgb(54,95,145);
}

h2 {
    color: rgb(54,95,145);
}

h3 {
    color: rgb(79,129,189);
}
        </style>
    </head>
    <body>

<h1>Boilerplate Removal with Uniplate</h1>

<p style="text-align:right;margin-bottom:25px;">
    by <a href="http://community.haskell.org/~ndm/">Neil Mitchell</a>
</p>

<p style="margin-left:10%;margin-right:10%;margin-bottom:25px;text-align:justify;">
    Generic transformations and queries are often referred to as boilerplate code - they remain relatively similar as the action performed by the code changes, and can often outnumber the actual intent of the code in terms of lines. While other generic traversal schemes have shown how powerful new features can be added to compilers, and how the type system can be manipulated into accepting these operations, the Uniplate library focuses on a conceptually simpler generic concept. A more complete document on Uniplate was published at the Haskell Workshop 2007, and is available from the <a href="http://community.haskell.org/~ndm/uniplate/">project website</a>, along with a video presentation, and the associated thesis chapter.
</p>
<p>
	Uniplate is a simple, concise and fast generics library. To expand on that sentence:
</p>
<ol>
	<li>A generics library is one which allows you to write functions that operate over a data structure without tying down all aspects of the data structure. In particular, when writing an operation, you don't need to give a case for each constructor, and you don't have to state which fields are recursive.</li>
	<li>Uniplate is the simplest generics library. Using Uniplate is within the reach of all Haskell programmers.</li>
	<li>Uniplate is more concise than any other generics library.</li>
	<li>Uniplate is fast, not always the absolute fastest, but massively faster than many generics libraries.</li>
	<li>Uniplate is also less powerful than some other generics libraries, but if it does the job, you should use it.</li>
</ol>
<p>
    The Uniplate library can be installed with the standard sequence of cabal commands:
</p>
<pre>
cabal update
cabal install uniplate
</pre>
<p>
    This document proceeds as follows:
</p>
<ol>
    <li>Using Uniplate</li>
    <li>Using Biplate</li>
    <li>Making Uniplate Faster</li>
</ol>

<h3>Acknowledgements</h3>

<p>
    Thanks to Bj&ouml;rn Bringert for feedback on an earlier version of this document, Eric Mertens for various ideas and code snippets, and to Matt Naylor and Tom Shackell for helpful discussions.
</p>


<h2>Using Uniplate</h2>

<p>
	To demonstrate the facilities of Uniplate, we use a simple arithmetic type:
</p>
<pre>
<b>{-# LANGUAGE DerivingDataTypeable #-}</b>
module Expr where
<b>import Data.Generics.Uniplate.Data</b>

data Expr = Val Int
          | Add Expr Expr
          | Sub Expr Expr
          | Div Expr Expr
          | Mul Expr Expr
          | Neg Expr
          deriving (Show, Eq, <b>Data, Typeable</b>)
</pre>
<p>
	In this definition, the Uniplate specific bits are bolded. The three extra parts are:
</p>
<ul>
<li><tt>import Data.Generics.Uniplate.Data</tt>, this module contains all the Uniplate functions and definitions.</li>
<li><tt>deriving (Data,Typeable)</tt>, this deriving clause automatically adds the necessary instances for Uniplate.</li>
<li><tt>{-# LANGUAGE DerivingDataTypeable #-}</tt>, this pragma turns on language support for the deriving line.</li>
</ul>
<p>
	This definition makes use of the <a href="http://doi.acm.org/10.1145/604174.604179">Scrap Your Boilerplate (SYB)</a> based Uniplate implementation. The SYB implementation is compatible with the other implementations, but is slower (between 2 and 8 times) and requires some modest compiler extensions (implemented in <a href="http://haskell.org/ghc/">GHC</a> for many years). The alternative definition scheme is described towards the end of this document, in "Making Uniplate Faster". I recommend using the SYB implementation to start with, as it requires least work to use.
</p>
<p>
	The Uniplate library defines two classes, <tt>Uniplate</tt> and <tt>Biplate</tt>, along with a number of functions. After importing <tt>Data.Generics.Uniplate.Data</tt> all types which have <tt>Data</tt> instances automatically have the necessary Uniplate instances. In the following subsections we introduce the Uniplate functions, along with examples of using them. The two most commonly used functions are <tt>universe</tt> (used for queries) and <tt>transform</tt> (used for transformations).
</p>

<h3>Finding the constant values</h3>

<pre class="define">
universe :: Uniplate on => on -> [on]
</pre>
<p>
	When manipulating our little language it may be useful to know which constants have been used. This can be done with the following code:
</p>
<pre>
constants :: Expr -> [Int]
constants x = nub [y | Val y <- universe x]
</pre>
<p>
    Here the only Uniplate method being used is <tt>universe</tt>, which when given a tree returns all the root of the tree, and all it's subtrees at all levels. This can be used to quickly flatten a tree structure into a list, for quick analysis via list comprehensions, as is done above.
</p>
<p>
    <i>Exercise:</i> Write a function to test if an expression performs a division by the literal zero.
</p>

<h3>Basic optimisation</h3>

<pre class="define">
transform :: Uniplate on => (on -> on) -> on -> on
</pre>
<p>
    If we are negating a literal value, this computation can be performed in advance, so let's write a function to do this.
</p>
<pre>
optimise :: Expr -> Expr
optimise = transform f
    where f (Neg (Val i)) = Val (negate i)
          f x = x
</pre>
<p>
    Here the Uniplate method being used is <tt>transform</tt>, which applies the given function to all the children of an expression, before applying it to the parent. This function can be thought of as bottom-up traversal of the data structure. The optimise code merely pattern matches on the negation of a literal, and replaces it with the literal.
</p>
<p>
    Now lets add another optimisation into the same pass, just before the <tt>f x = x</tt> line insert:
</p>
<pre>
    f (Add x y) | x == y = Mul x (Val 2)
</pre>
<p>
    This takes an addition where two terms are equal and changes it into a multiplication, causing the nested expression to be executed only once.
</p>
<p>
    <i>Exercise:</i> Extend the optimisation to so that adding <tt>x</tt> to <tt>Mul x (Val 2)</tt> produces a multiplication by 3.
</p>


<h3>Depth of an expression</h3>

<pre class="define">
para :: Uniplate on => (on -> [res] -> res) -> on -> res
</pre>
<p>
    Now lets imagine that programmers in your language are paid by the depth of expression they produce, so lets write a function that computes the maximum depth of an expression.
</p>
<pre>
depth :: Expr -> Int
depth = para (\_ cs -> 1 + maximum (0:cs))
</pre>
<p>
    This function performs a paramorphism (a bit like a fold) over the data structure. The function simply says that for each iteration, add one to the previous depth.
</p>
<p>
    <i>Exercise:</i> Write a function that counts the maximum depth of addition only.
</p>

<h3>Renumbering literals</h3>

<pre class="define">
transformM :: (Monad m, Uniplate on) => (on -> m on) -> on -> m on
</pre>
<p>
    The literal values need to be replaced with a sequence of numbers, each unique. This is unlikely for an arithmetic expression, but consider bound variables in lambda calculus and it starts to become a bit more plausible:
</p>
<pre>
uniqueLits :: Expr -> Expr
uniqueLits x = evalState (transformM f x) [0..]
    where
        f (Val i) = do
            y:ys <- get
            put ys
            return (Val y)
        f x = return x
</pre>
<p>
    Here a monadic computation is required, the program needs to keep track of what the next item in the list to use is, and replace the current item. By using the state monad, this can be done easily.
</p>
<p>
    <i>Exercise:</i> Allow each literal to occur only once, when a second occurance is detected, replace that literal with zero.
</p>

<h3>Generating mutants</h3>

<pre class="define">
contexts :: Uniplate on => on -> [(on, on -> on)]
</pre>
<p>
    The person who is inputting the expression thinks they made a mistake, they suspect they got one of the values wrong by plus or minus one. Generate all the expressions they might have written.
</p>
<pre>
mutate :: Expr -> [Expr]
mutate x = concat [[gen $ Val $ i-1, gen $ Val $ i+1]
                  | (Val i, gen) <- contexts x]
</pre>
<p>
   The <tt>transform</tt> function is useful for doing an operation to all nodes in a tree, but sometimes you only want to apply a transformation once. This is less common, but is sometimes required. The idea is that the context provides the information required to recreate the original expression, but with this node altered.
</p>
<p>
    <i>Exercise:</i> Replace one multiplication with addition, if there are no multiplications return the original expression.
</p>

<h3>Fixed point optimisation</h3>

<pre class="define">
rewrite :: Uniplate on => (on -> Maybe on) -> on -> on
</pre>
<p>
	When slotting many transformations together, often one optimisation will enable another. For example, the the optimisation to reduce.
</p>

<h3>Descend</h3>

<p>
	Do something different in the odd and even cases. Particularly useful if you have free variables and are passing state downwards.
</p>

<h3>Monadic Variants</h3>

<pre class="define">
descendM :: Monad m => (on -> m on) -> on -> m on                         -- descend
transformM :: (Monad m, Uniplate on) => (on -> m on) -> on -> m on        -- transform
rewriteM :: (Monad m, Uniplate on) => (on -> m (Maybe on)) -> on -> m on  -- rewrite
</pre>

<p>
	All the transformations have both monadic and non-monadic versions.
</p>

<h3>Single Depth Varaints</h3>

<pre class="define">
children :: Uniplate on => on -> [on]           -- universe
descend :: (on -> on) -> on -> on               -- transform
holes :: Uniplate on => on -> [(on, on -> on)]  -- contexts
</pre>

<p>
	Lot's of functions which operate over the entire tree also operate over just one level. Usually you want to use the multiple level version, but when needing more explicit control the others are handy.
</p>

<h3>Evaluation</h3>

<p>
	Don't use Uniplate! The reasons are that there is little boilerplate, you have to handle every case separately. For example in our language we can write:
</p>


<h2>Using Biplate</h2>

<p>
	All the operations defined in Uniplate have a corresponding Biplate instance. Typically the operations are just the same as Uniplate, with <tt>Bi</tt> on the end.
</p>
<pre class="define">
universeBi :: Biplate on with => on -> [with]
transformBi :: Biplate on with => (with -> with) -> on -> on
transformBiM :: (Monad m, Biplate on with) => (with -> m with) -> on -> m on
</pre>
<p>
	The biggest difference is for the functions <tt>childrenBi</tt> and <tt>descendBi</tt>. In these cases, if the starting type and the target type are the same, then the input value will be returned. For example:
</p>
<pre>
childrenBi (Add (Val 1) (Val 2)) == [Add (Val 1) (Val 2)]
children (Add (Val 1) (Val 2)) == [Val 1, Val 2]
</pre>

<p>
	For example, you should never hvae <tt>descendBi</tt> in an inner recursive loop.
</p>

<h2>Making Uniplate Faster</h2>

<p>
	To make Uniplate faster import <tt>Data.Generics.Uniplate.Direct</tt>, and provide Uniplate instances by generating them with the <a href="http://community.haskell.org/~ndm/derive/">Derive tool</a>.
</p>


    </body>
</html>
